## 웹기본 동작방식 이해
브라우저 -> 웹서버(하나의 브라우저의 요청당 (request, response)) -> WAS(Tomcat) (J2EE)
-> Servlet 동작 (웹 클래스), JSP(Java Server Page) - HTML태그와 같이 사용할 수 있는 클래스

## 브라우저가 정보를 전달하기 위해 사용하는 방식
form method = 정보전달 방식지정  action = 서버로 전송
1. GET : 주소창에 원하는 데이터를 적거나 링크로 호출 /w '?' '&'
2. POST : 주소와 데이터를 따로 보내는 방식 ex) 회원가입, 로그인

## 동적데이터 vs 정적데이터
  동적데이터 - 서버 사이드 프로그래밍 /w PHP, 6JSP, Servlet 프로그래밍 ( 서버에서 동적으로 동작하는 웹기반 프로그램 작성 )

------------------------------

Todo
- 동시에 여러요청이 들어올때 어떻게 처리할 지
- 서버 장애시 어떻게 처리해야할 지
- 데이터 전송을 어떻게 최적화할 지
- 분산처리, 서버운영법
  https://linux.systemv.pe.kr/?s=ee-8

 ## Servlet
  서버에서 동적으로 비즈니스 로직(요청과 응답)을 처리하는 API
  -> 지원 환경(WAS:tomcat)에서 코드를 작성하고 서버에 설정하여 프로그래밍

 ## Tomcat 의 역할
  웹클래스 객체를 생성하고 호출하는 주체 (웹 컨테이너이자 웹서버)
  Servlet 에서 생성하는 객체 관리

 ## JSP
 GET/POST 방식의 호출을 구분하지 않음 - 유지보수측면에서   재조정해야
 -> 현재 JSP
      쿼리스트링이나 파라미터 처리 안함
      JSP 는 입력화면을 구성하거나 처리 결과를 출력하는 용도
      Servlet 경로를 통해 JSP 파일을 확인하는 방식

      문제해결을 위해 웹 MVC 방식으로 비즈니스 로직은 Servlet 에서, 처리결과는 JSP 에서

 ## 웹 MVC 방식
  Servlet 코드로 자바 이용가능 + 상속, 인터페이스 처리 가능
  데이터는 Controller 에서
  결과는 View 에서

 ## PRG 패턴 Post-Redirect-Get - MVC 패턴에서 가장 흔히 사용 ( Post 와 Redirect 결합 )
  1. 사용자는 컨트롤러에 Post 방식 처리요청
  2. Post 방식을 컨트롤러에서 처리, 브라우저는 다른 경로로 이동하라는 응답 ( Redirect )
  3. 브라우저는 GET 방식으로 이동

  장점
    1) 중복제출방지 : 브라우저 새로고침 시 Post 요청 재실행 xx (Get 요청만 실행)
    2) 안전한 URL : 결과 페이지를 Get 요청으로 표시하기 때문
    -> 데이터 제출 후 새로고침, 뒤로가기 시 중복처리를 방지할 수 있는 상황에서 사용 ex) 쇼핑몰 카트 및 결제, 게시판 글쓰기 및 댓글작성
