## 스프링부트에서 웹 개발

    1. xml 파일 등 웹 관련 설정파일 -> 클래스로 작성
        컨트롤러와 thymeleaf 생성 in resources.templates

    2. JSON 데이터 만들기
        API 서버 구성 - 순수한 데이터만 전송

## Thymeleaf - 스프링부트의 템플릿 엔진
    데이터를 템플릿에 맞춰 보여주는 방식

    <html xmlns:th="http://www.thymeleaf.org"> - 네임스페이스 필요

    제어문 형태 : th:if / th:unless / th:switch

    인라인처리 : 동일한 데이터를 다르게 처리 - js 사용 시 용이

    레이아웃 기능
    <th:block> 레이아웃을 만들어 특정한 페이지에서 필요한 부분만을 작성 /w implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.1.0'

## JPA java persistence api - 자바(객체)로 영속 영역을 처리하는 API
    JPA 의 상위개념은 ORM( object relational mapping ) 패러다임

    ORM - 객체지향으로 구성한 시스템을 관계형 데이터베이스에 매핑하는 패러다임

    스프링과 연동 시 Spring Data JPA 라이브러리 사용 - JPA 단독 사용할 때 보다 코드를 간소화

목표
1. 게시물 CRUD
    list page : 제목/내용/작성자에 대해 검색, 페이지 처리 - 검색조건에 따른 쿼리가 실행되도록
                Querydsl, jOOQ 등 사용
    register page : 등록/수정 시간이 자동 처리, 등록 완료 시 모달로 확인
    read page : 특정 게시물 조회 시 페이지 및 검색조건을 유지하도록 구현
    modify page : 수정 후 또는 삭제 시 삭제확인하는 모달 구현 후 list page

2. 페이징처리, 검색기능

3. JPA 의 목적은 객체지향( Entity 객체 )을 통해 영속계층 처리
    ?? Entity 객체 : Pk 를 갖는 자바의 객체 -> 식별을 위해 @Id 적용

    JPARepository 인터페이스 - 자동 객체 생성 및 예외 처리

    => JPA 기반 서비스는 엔티티 작성부터

    @MappedSuperClass 를 이용한 공통속성 처리 /w BaseEntity 클래스